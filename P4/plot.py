import numpy as np
import matplotlib.pyplot as plt

# Information about the dimmensions of the data set
meta = np.loadtxt("results/meta.txt", usecols=0)

cycles = int(meta[0])
cutoff = int(meta[1])
cores = int(meta[2])
L = int(meta[3])
T = float(meta[4])

# data set generated by the Monte Carlo simulation
array = np.fromfile("results/data.dat", dtype="int32", count=-1)

E = np.zeros((cores, cycles))
M = np.zeros((cores, cycles))

for i in range(cores):
    start = 2 * cycles * i
    end = 2 * cycles * i + cycles
    E[i] = array[start:end]
    M[i] = array[(start + cycles):(end + cycles)]


fig = plt.figure()
plt.plot(E[i] / L**2)
plt.xlabel("Cycle")
plt.ylabel("Energy per spin")
plt.legend(["energy, L=%s, T=%s" % (L, T)])
#    plt.legend("Energy of system")
fig.savefig("plots/plot_energy_L=%s_T=%s.pdf" % (L, T))

fig = plt.figure()
plt.plot(M[i] / L**2)
plt.xlabel("Cycle")
plt.ylabel("magnetization per spin")
plt.legend(["magnetization, L=%s, T=%s" % (L, T)])
#    plt.legend("Energy of system")
fig.savefig("plots/plot_magnetization_L=%s_T=%s.pdf" % (L, T))


# probability distribution
# -----------------------------------------------------------------------------
state = np.loadtxt("results/distribution.txt", usecols=0)
prob = np.loadtxt("results/distribution.txt", usecols=1)

fig = plt.figure()
plt.plot(state, prob, "o")
plt.xlabel("energy")
plt.ylabel("probability")
plt.legend(["distribution, L=%s, T=%s" % (L, T)])
fig.savefig("plots/distribution_L=%s_T=%s.pdf" % (L, T))
# -----------------------------------------------------------------------------

# numerical vs. analytical
# -----------------------------------------------------------------------------
file = "results/evolution_L=2.txt"
t = np.loadtxt(file, usecols=0)
T = np.linspace(t[0], t[-1], 1000)
E_anal = -(8 * np.sinh(8 / T)) / (np.cosh(8 / T) + 3) / 4
M_anal = (2 * np.exp(8 / T) + 4) / (np.cosh(8 / T) + 3) / 4
Cv_anal = 1 / T**2 * 64 * (3 * np.cosh(8 / T) + 1) / \
    (np.cosh(8 / T) + 3)**2 / 4
X_anal = 1 / T * ((8 * np.exp(8 / T) + 8) /
                  (np.cosh(8 / T) + 3) - (4 * M_anal)**2) / 4


E = np.loadtxt(file, usecols=1)
M = np.loadtxt(file, usecols=2)
Cv = np.loadtxt(file, usecols=3)
X = np.loadtxt(file, usecols=4)

fig = plt.figure()
plt.subplot(2, 2, 1)
plt.xlabel("T")
plt.ylabel("<E>")
plt.plot(t, E, linewidth=0.5)
plt.plot(T, E_anal, linewidth=0.5)

plt.subplot(2, 2, 2)
plt.xlabel("T")
plt.ylabel("<|M|>")
plt.plot(t, M, linewidth=0.5)
plt.plot(T, M_anal, linewidth=0.5)

plt.subplot(2, 2, 3)
plt.xlabel("T")
plt.ylabel("<Cv>")
plt.plot(t, Cv, linewidth=0.5)
plt.plot(T, Cv_anal, linewidth=0.5)

plt.subplot(2, 2, 4)
plt.xlabel("T")
plt.ylabel("X")
plt.plot(t, X, linewidth=0.5)
plt.plot(T, X_anal, linewidth=0.5)

fig.savefig("plots/numericalVsAnalytical.pdf")
# -----------------------------------------------------------------------------
