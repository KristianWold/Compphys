import numpy as np
import matplotlib.pyplot as plt

# Information about the dimmensions of the data set
meta = np.loadtxt("results/meta.txt", usecols=0)

cycles = int(meta[0])
cutoff = int(meta[1])
cores = int(meta[2])
L = int(meta[3])
T = float(meta[4])

# data set generated by the Monte Carlo simulation
array = np.fromfile("results/data.dat", dtype="int32", count=-1)

E = np.zeros((cores, cycles))
M = np.zeros((cores, cycles))

for i in range(cores):
    start = 2 * cycles * i
    end = 2 * cycles * i + cycles
    E[i] = array[start:end]
    M[i] = array[(start + cycles):(end + cycles)]



fig = plt.figure()
plt.plot(E[i] / L**2)
plt.xlabel("Cycle")
plt.ylabel("Energy per spin")
plt.legend(["energy, L=%s, T=%s" % (L, T)])
#    plt.legend("Energy of system")
fig.savefig("plots/plot_energy_L=%s_T=%s.pdf" % (L, T))

fig = plt.figure()
plt.plot(M[i] / L**2)
plt.xlabel("Cycle")
plt.ylabel("magnetization per spin")
plt.legend(["magnetization, L=%s, T=%s" % (L, T)])
#    plt.legend("Energy of system")
fig.savefig("plots/plot_magnetization_L=%s_T=%s.pdf" % (L, T))


# probability distribution
# -----------------------------------------------------------------------------
state = np.loadtxt("results/distribution.txt", usecols=0)
prob = np.loadtxt("results/distribution.txt", usecols=1)

fig = plt.figure()
plt.plot(state, prob, "o")
plt.xlabel("energy")
plt.ylabel("probability")
plt.legend(["distribution, L=%s, T=%s" % (L, T)])
fig.savefig("plots/distribution_L=%s_T=%s.pdf" % (L, T))
# -----------------------------------------------------------------------------


# phase transtion
# -----------------------------------------------------------------------------
L = [40, 80, 100, 140]
t = np.loadtxt("results/evolution_L=40.txt", usecols=0)

E = []; M = []; Cv = []; X = []

for l in L:
    file = "results/evolution_L=%s.txt"%(l)
    E.append(np.loadtxt(file, usecols=1))
    M.append(np.loadtxt(file, usecols=2))
    Cv.append(np.loadtxt(file, usecols=3))
    X.append(np.loadtxt(file, usecols=4))

fig = plt.figure()
plt.plot(t, E[0])
plt.plot(t, E[1])
plt.plot(t, E[2])
plt.plot(t, E[3])
plt.xlabel("T")
plt.ylabel("<E>")
plt.legend(["L=40","L=80","L=100","L=140"])
fig.savefig("plots/evolution_energy.pdf")

fig = plt.figure()
plt.plot(t, M[0])
plt.plot(t, M[1])
plt.plot(t, M[2])
plt.plot(t, M[3])
plt.xlabel("temperature")
plt.ylabel("<|M|>")
plt.legend(["L=40","L=80","L=100","L=140"])
fig.savefig("plots/evolution_magnetization.pdf")

fig = plt.figure()
plt.plot(t, Cv[0])
plt.plot(t, Cv[1])
plt.plot(t, Cv[2])
plt.plot(t, Cv[3])
plt.xlabel("Temperature")
plt.ylabel("Cv")
plt.legend(["L=40","L=80","L=100","L=140"])
fig.savefig("plots/evolution_cv.pdf")

fig = plt.figure()
plt.plot(t, X[0])
plt.plot(t, X[1])
plt.plot(t, X[2])
plt.plot(t, X[3])
plt.xlabel("temperature")
plt.ylabel("Susceptibility")
plt.legend(["L=40","L=80","L=100","L=140"])
fig.savefig("plots/evolution_susceptibility.pdf")
# -----------------------------------------------------------------------------
